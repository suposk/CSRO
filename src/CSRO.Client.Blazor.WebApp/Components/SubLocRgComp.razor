@inherits SubLocRgCompBase
@using CSRO.Client.Services.Models
@using CSRO.Client.Services.Validation
@using Blazored.FluentValidation

<MudContainer>
    <div>
        <MudText Typo="Typo.h4" GutterBottom="true">@Title</MudText>
        @if (IsLoading)
        {
            <MudGrid>
                <MudItem>
                    <MudProgressCircular Color="Color.Default" Indeterminate="true" />
                </MudItem>
                <MudItem>
                    <MudText>@LoadingMessage</MudText>
                </MudItem>
            </MudGrid>
        }

        @if (Success == false)
        {
            <EditForm Model="@Model" OnValidSubmit="OnValidSubmit">
                @*<DataAnnotationsValidator />*@
                <FluentValidationValidator />
                <MudCard>
                    <MudCardContent>
                        @if (OperationTypeTicket != OperatioType.Create)
                        {
                            <MudTextField Label="Id:"
                                          Disabled="true"
                                          @bind-Value="Model.Id" For="@(() => Model.Id)" />


                            @*<MudTextField Label="Subcription Name:"
                          Disabled="true"
                          @bind-Value="Model.SubcriptionName" For="@(() => Model.SubcriptionName)" />

            <MudTextField Label="Resorce Group:"
                          Disabled="true"
                          @bind-Value="Model.ResourceGroup.Name" For="@(() => Model.ResourceGroup.Name)" />*@

                        }
                        else
                        {
                            <MudAutocomplete ResetValueOnEmptyText="true"
                                             T="@IdName"
                                             Label="Subcription:"
                                             ToStringFunc="@Model.SubscripionIdName.IdNameConverter"
                                             ValueChanged="(e) => OnSubscriptionChanged(e)"
                                             For="@(() => Model.SubscripionIdName)"
                                             SearchFunc="@SearchSubs" />

                            <MudSelect T="@IdName"
                                       Disabled="@IsLocDisabled"
                                       Label="Location"
                                       ToStringFunc="@Model.LocationIdName.IdNameConverter"
                                       ValueChanged="(e) => OnLocationChanged(e)"
                                       For="@(() => Model.LocationIdName)">
                                @foreach (var loc in Locations)
                                {
                                    <MudSelectItem T="IdName" Value="@loc">@loc</MudSelectItem>
                                }
                            </MudSelect>

                            <MudSelect T="@string"
                                       Disabled="@IsRgDisabled"
                                       OffsetY="true"
                                       Label="Resource Group:"
                                       @bind-Value="Model.ResourceGroup.Name"
                                       For="@(() => Model.ResourceGroup.Name)">
                                @foreach (var rg in ResourceGroups)
                                {
                                    <MudSelectItem T="string" Value="@rg">@rg</MudSelectItem>
                                }
                            </MudSelect>

                            <div style="max-width: 30%" class="mt-4">
                                <MudPaper>
                                    @if (Model.IsNewRg)
                                    {
                                        <MudButton ButtonType="ButtonType.Button"
                                                   Size="Size.Small"
                                                   Color="Color.Info"
                                                   OnClick="@(() => Model.IsNewRg = !Model.IsNewRg)">
                                            Cancel
                                        </MudButton>

                                        <MudTextField Label="New Name" Disabled="@(!Model.IsNewRg)"
                                                      @bind-Value="Model.NewRgName"
                                                      For="@(() => Model.NewRgName)" />
                                    }
                                    else
                                    {
                                        <MudButton ButtonType="ButtonType.Button"
                                                   Size="Size.Small"
                                                   Color="Color.Info"
                                                   OnClick="@(() => Model.IsNewRg = !Model.IsNewRg)">
                                            Create new
                                        </MudButton>
                                    }
                                </MudPaper>
                            </div>
                        }

                        @if (IsReadOnly)
                        {
                            <MudTextField Label="Created By:" Disabled="true"
                                          @bind-Value="Model.CreatedBy" For="@(() => Model.CreatedBy)" />

                            <MudTextField Label="Created At:" Disabled="true"
                                          @bind-Value="Model.CreatedAt" For="@(() => Model.CreatedAt)" />
                        }

                    </MudCardContent>
                    @if (!IsReadOnly)
                    {
                        <MudCardActions>
                            @if (Model.IsNewRg)
                            {
                                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Create</MudButton>
                            }
                        </MudCardActions>
                    }
                </MudCard>
                @if (OperationTypeTicket == OperatioType.Create)
                {
                    <MudText Typo="Typo.body2" Align="Align.Center" Class="my-4">
                        Fill out the form correctly to see the success message.
                    </MudText>

                    <MudExpansionPanels>
                        <MudExpansionPanel IsExpanded="true"
                                           Text="Show Validation Summary">
                            @if (Success)
                            {
                                <MudText Color="Color.Success">Success</MudText> }
                            else
                            {
                                <MudText Color="@Color.Error">
                                    <ValidationSummary />
                                </MudText>
                            }
                        </MudExpansionPanel>
                    </MudExpansionPanels>
                }
            </EditForm>
        }
        else
        {
            <MudText Color="Color.Success" Typo="Typo.h4">Success</MudText>
        }
        <MudButton Class="mt-4" OnClick="GoBack" ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary">Go Back</MudButton>
    </div>
</MudContainer>
