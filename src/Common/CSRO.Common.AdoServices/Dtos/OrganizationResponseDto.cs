// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using CSRO.Common.AdoServices.Dtos;
//
//    var organizationResponseDto = OrganizationResponseDto.FromJson(jsonString);

namespace CSRO.Common.AdoServices.Dtos
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class OrganizationResponseDto
    {
        [JsonProperty("dataProviderSharedData", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public Data DataProviderSharedData { get; set; }

        [JsonProperty("dataProviders", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public DataProviders DataProviders { get; set; }
    }

    public partial class Data
    {
    }

    public partial class DataProviders
    {
        [JsonProperty("ms.vss-web.component-data", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public Data MsVssWebComponentData { get; set; }

        [JsonProperty("ms.vss-web.shared-data")]
        public object MsVssWebSharedData { get; set; }

        [JsonProperty("ms.vss-features.my-organizations-data-provider", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public MsVssFeaturesMyOrganizationsDataProvider MsVssFeaturesMyOrganizationsDataProvider { get; set; }
    }

    public partial class MsVssFeaturesMyOrganizationsDataProvider
    {
        [JsonProperty("organizations", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public List<OrganizationDto> Organizations { get; set; }

        [JsonProperty("mostRecentlyAccessedHosts", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public List<Guid> MostRecentlyAccessedHosts { get; set; }

        [JsonProperty("createNewOrgUrl", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public Uri CreateNewOrgUrl { get; set; }

        [JsonProperty("isUserAccountMappingRequired", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public bool? IsUserAccountMappingRequired { get; set; }
    }

    public partial class OrganizationDto
    {
        [JsonProperty("id", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public Guid? Id { get; set; }

        [JsonProperty("name", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        [JsonProperty("url", Required = Required.DisallowNull, NullValueHandling = NullValueHandling.Ignore)]
        public Uri Url { get; set; }
    }

    public partial class OrganizationResponseDto
    {
        public static OrganizationResponseDto FromJson(string json) => JsonConvert.DeserializeObject<OrganizationResponseDto>(json, CSRO.Common.AdoServices.Dtos.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this OrganizationResponseDto self) => JsonConvert.SerializeObject(self, CSRO.Common.AdoServices.Dtos.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
